import { useDataQueryContext } from "@renderer/context/useDataQueryContext";
import { IPaginatedResponse } from "@renderer/requests";

export interface ITableViewProps {
  data: IPaginatedResponse;
  columns?: string[];
}
// Columns are dynmically generated by the key's dynmically, but optional 'columns' prop allows us
// to manually override if desired.
export const TableView = ({ data, columns }: ITableViewProps): JSX.Element => {
  const { setDesc, sortBy, setSortBy } = useDataQueryContext();

  const dataArray = data.results;

  const handleHeaderClick = (e: React.MouseEvent<HTMLTableCellElement>): void => {
    const headerVal = e.currentTarget.textContent as string;
    if (headerVal === sortBy) {
      setDesc((prev) => !prev);
    } else {
      setSortBy(headerVal);
    }
  };

  const headers = (): JSX.Element => {
    const columnNames = columns ?? Object.keys(dataArray[0]);
    return (
      <tr>
        {columnNames.map((col, i) => (
          <td className="table-cell" onClick={handleHeaderClick} key={i}>
            {col}
          </td>
        ))}
      </tr>
    );
  };

  const rows = (): JSX.Element[] => {
    const columnNames = columns ?? Object.keys(dataArray[0]);
    return dataArray.map((element, i) => (
      <tr key={i}>
        {columnNames.map((col, i) => {
          return (
            <td className={i !== 0 ? "table-cell" : "table-cell-charname"} key={i}>
              {element[col]}
            </td>
          );
        })}
      </tr>
    ));
  };

  if (dataArray === undefined || dataArray.length == 0) {
    return <div className="no-results-div">NO RESULTS</div>;
  }

  return (
    <div className="table-container" id="table-container">
      <table className="table-body">
        <thead>{headers()}</thead>
        <tbody>{rows()}</tbody>
      </table>
    </div>
  );
};
